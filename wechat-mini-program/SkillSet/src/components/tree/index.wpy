<style tyle="less">
.skillCellImg {
  margin-right: 9px;
  vertical-align: middle;
  width: 18px;
  height: 18px;
}
.button-sp-area {
  margin: 0 auto;
  padding-top: 15px;
  padding-bottom: 15px;
  width: 88%;
}
</style>
<template>
  <view style="width:{{deviceWidth}}px;height:{{deviceHeight}}px;overflow:scroll;">
    <canvas canvas-id="skillTree" style="width: 2000px; height: 2000px"></canvas>
  </view>
  
  <view class="page__bd">
    <repeat for="{{skills}}" key="index" item="item">
      <view class="weui-cells weui-cells_after-title">
        <view class="weui-cell">
          <view class="weui-cell__bd">{{ item.floor }}</view>
          <view class="weui-cell__bd">{{ item.name }}</view>
          <view class="weui-cell__ft" @tap="enableAdd({{index}} , {{item}})">
            <image class="skillCellImg" src="../../images/add.png"></image>
          </view>
          <view class="weui-cell__ft" @tap="enableEdit({{index}} , {{item}})">
            <image class="skillCellImg" src="../../images/edit.png"></image>
          </view>
          <view class="weui-cell__ft" @tap="deleteSkill({{index}} , {{item}})">
            <image class="skillCellImg" src="../../images/delete.png"></image>
          </view>
        </view>
      </view>
      <view class="weui-cell weui-cell_input" style="display:{{item.showEdit}}">
        <view class="weui-cell__hd">
          <view class="weui-label">编辑技能</view>
        </view>
        <view class="weui-cell__bd">
          <input
            class="weui-input"
            placeholder="请输入技能名称"
            bindinput="changeNewSkillValue"
          />
        </view>
        <view class="weui-cell__ft" @tap="editSkill({{index}} , {{item}})">
          <icon type="success_no_circle" size="23" color="#E64340"></icon>
        </view>
      </view>
      <view class="weui-cell weui-cell_input" style="display:{{item.showAdd}}">
        <view class="weui-cell__hd">
          <view class="weui-label">新增技能</view>
        </view>
        <view class="weui-cell__bd">
          <input
            class="weui-input"
            placeholder="请输入技能名称"
            bindinput="changeNewSkillValue"
          />
        </view>
        <view class="weui-cell__ft" @tap="addSkill({{index}} , {{item}})">
          <icon type="success_no_circle" size="23" color="#E64340"></icon>
        </view>
      </view>
    </repeat>
  </view>
  <view class="page__bd page__bd_spacing">
    <view class="button-sp-area">
      <button class="weui-btn" type="primary" bindtap="generateSkillTreeImg">
        生成思维导图
      </button>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy';

import TestMixin from '../../mixins/test';
import { calTreePos } from './util';
import COLORS from './constants';

export default class Tree extends wepy.component {
  data = {
    newSkill: '',
    deviceWidth: wx.getSystemInfoSync().windowWidth,
    deviceHeight: wx.getSystemInfoSync().windowHeight,
    fontSize: 15,
    nodeWidth: 0,
    space: 10,
    treeHeight: 400,
    maxFloor: 1,
    colors: COLORS,
  };
  mixins = [TestMixin];
  methods = {
    changeNewSkillValue(event) {
      this.newSkill = event.detail.value;
    },
    addSkill(index, item) {
      this.skills.splice(index + 1, 0, {
        name: this.newSkill,
        floor: item.floor + 1,
        showEdit: 'none',
        showAdd: 'none',
      });
      this.skills[index].showAdd = 'none';
      this.newSkill = '';
    },
    enableAdd(index, item) {
      this.skills[index].showAdd = '';
    },
    enableEdit(index, item) {
      this.skills[index].showEdit = '';
    },
    editSkill(index, item) {
      if (this.newSkill != '') {
        this.skills[index].name = this.newSkill;
        this.newSkill = '';
      }
      this.skills[index].showEdit = 'none';
    },
    deleteSkill(index, item) {
      if (index === 0) {
        return;
      }
      let num = 1;
      let keepOn = true;
      this.skills.forEach((v, i) => {
        if (i > index && v.floor > item.floor && keepOn) {
          num++;
        }
        if (i > index && v.floor <= item.floor) {
          keepOn = false;
        }
      });
      this.skills.splice(index, num);
    },
    generateSkillTreeImg() {
      this.showPanel = 'none';
      this.showCanvas = '';
      let getRandomNum = function (Min, Max) {
        let Range = Max - Min;
        let Rand = Math.random();
        return Min + Math.round(Rand * Range);
      };
      let Treedata = this.getTreeData();
      const { treePos, canvasWidth, canvasHeight } = calTreePos(Treedata);
      this.treeHeight = canvasHeight > 1000 ? canvasHeight + 'px' : '1000px';
      let _ctx = wx.createCanvasContext('skillTree', this);
      _ctx.setFontSize(this.fontSize);
      treePos.each((node) => {
        _ctx.fillText(node.data.name, node.x, node.y, this.nodeWith);
        _ctx.setLineWidth(1);
        (node.children || []).forEach((cNode) => {
          const sX = node.x,
            sY = node.y,
            eX = cNode.x,
            eY = cNode.y;
          const delta = Math.floor((eY - sY) / 2);
          const cpx = (sX + eX) / 2;
          const cpy = (sY + eY) / 2 + delta;
          const colorIndex = Math.floor(Math.random() * COLORS.length);
          const lineColor = COLORS[colorIndex];
          _ctx.setStrokeStyle(lineColor);
          _ctx.beginPath();
          _ctx.moveTo(sX, sY);
          _ctx.quadraticCurveTo(cpx, cpy, eX, eY);
          _ctx.stroke();
        });
      });
      _ctx.draw();
      return;
    },
  };
  getTreeData() {
    let _skills = this.skills;
    // 根据层数确定字体大小
    _skills.forEach((v) => {
      if (v.floor > this.maxFloor) {
        this.maxFloor = v.floor;
      }
    });
    this.nodeWidth = this.deviceWidth / (2 * this.maxFloor);

    // 获取每个skill渲染的位置
    let startHeight = 0;
    const l = _skills.length;
    _skills.map((v, index) => {
      if (index === 0) {
        _skills[index]['y'] = this.fontSize * 2;
        startHeight = this.fontSize * 2;
      } else {
        if (_skills[index - 1].floor < _skills[index].floor) {
          _skills[index]['y'] = startHeight;
        } else {
          _skills[index]['y'] = startHeight += this.fontSize * 2;
        }
      }
      _skills[index]['x'] = (_skills[index].floor - 1) * 2 * this.nodeWidth;
    });

    // 找到每个skill的父亲
    let i = l - 1;
    while (i >= 0) {
      let j = i - 1;
      while (j >= 0 && _skills[j].floor >= _skills[i].floor) {
        j--;
      }
      _skills[i]['father'] = j;
      i--;
    }
    return _skills;
  }
}
/**
 * 根节点在左上角
 * 1/20 deviceWidth
 * 应该是从父节点右下角开始画 到 子节点的右下角
 * 从根节点出发的每个分支的颜色要统一
 *
 */
</script>
