<style tyle="less">
  .skillCellImg {
    margin-right:9px;
    vertical-align: middle;
    width: 18px;
    height: 18px;
  }
  .button-sp-area{
    margin: 0 auto;
    padding-top: 15px;
    padding-bottom:15px;
    width: 88%;
  }
  .skillTreeImg {
    width:100%;
  }
</style>
<template>
  <canvas class="skillTreeImg" canvas-id="skillTree" style="display: {{showCanvas}};height: {{treeHeight}}"></canvas>
  <view class="page__bd">
      <repeat for="{{skills}}" key="index" item="item">
        <view class="weui-cells weui-cells_after-title">
          <view class="weui-cell">
          <view class="weui-cell__bd">{{item.floor}}</view>
          <view class="weui-cell__bd">{{item.name}}</view>
          <view class="weui-cell__ft" @tap="enableAdd({{index}} , {{item}})">
            <image class="skillCellImg" src="../images/add.png"></image>
          </view>
          <view class="weui-cell__ft" @tap="enableEdit({{index}} , {{item}})">
            <image class="skillCellImg" src="../images/edit.png"></image>
          </view>
          <view class="weui-cell__ft" @tap="deleteSkill({{index}} , {{item}})">
            <image class="skillCellImg" src="../images/delete.png"></image>
          </view>
        </view>
        </view>
        <view class="weui-cell weui-cell_input" style="display:{{item.showEdit}}">
          <view class="weui-cell__hd">
            <view class="weui-label">编辑技能</view>
          </view>
          <view class="weui-cell__bd">
            <input class="weui-input" placeholder="请输入技能名称" bindinput="changeNewSkillValue"/>
          </view>
          <view class="weui-cell__ft" @tap="editSkill({{index}} , {{item}})">
            <icon type="success_no_circle" size="23" color="#E64340"></icon>
          </view>
        </view>
        <view class="weui-cell weui-cell_input" style="display:{{item.showAdd}}">
          <view class="weui-cell__hd">
            <view class="weui-label">新增技能</view>
          </view>
          <view class="weui-cell__bd">
            <input class="weui-input" placeholder="请输入技能名称" bindinput="changeNewSkillValue"/>
          </view>
          <view class="weui-cell__ft" @tap="addSkill({{index}} , {{item}})">
            <icon type="success_no_circle" size="23" color="#E64340"></icon>
          </view>
        </view>
      </repeat>
  </view>
  <view class="page__bd page__bd_spacing">
    <view class="button-sp-area">
      <button class="weui-btn" type="primary" bindtap="generateSkillTreeImg">生成思维导图</button>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import TestMixin from '../mixins/test'

  export default class SkillCell extends wepy.component {
    data = {
      newSkill: '',
      deviceWidth: wx.getSystemInfoSync().windowWidth,
      fontSize: 15,
      nodeWidth: 0,
      space: 10,
      treeHeight:400,
      maxFloor: 1,
      colors: [
        'Aqua',
        'Aquamarine',
        'Bisque',
        'Black',
        'Blue',
        'BlueViolet',
        'Brown',
        'BurlyWood',
        'CadetBlue',
        'Chartreuse',
        'Chocolate',
        'Coral',
        'CornflowerBlue',
        'Crimson',
        'Cyan',
        'DarkBlue',
        'DarkCyan',
        'DarkGoldenRod',
        'DarkGray',
        'DarkGreen',
        'DarkKhaki',
        'DarkMagenta',
        'DarkOliveGreen',
        'DarkOrange',
        'DarkOrchid',
        'DarkRed',
        'DarkSalmon',
        'DarkSeaGreen',
        'DarkSlateBlue',
        'DarkSlateGray',
        'DarkSlateGrey',
        'DarkTurquoise',
        'DarkViolet',
        'DeepPink',
        'DeepSkyBlue',
        'DimGray',
        'DodgerBlue',
        'FireBrick',
        'ForestGreen',
        'Fuchsia',
        'Gold',
        'GoldenRod',
        'Gray',
        'Green',
        'GreenYellow',
        'HotPink',
        'IndianRed',
        'Indigo',
        'LawnGreen',
        'LightCoral',
        'LightGray',
        'LightPink',
        'LightSeaGreen',
        'LightSlateGray',
        'Magenta',
        'Maroon',
        'MediumBlue',
        'MediumSlateBlue',
        'MediumVioletRed',
        'MidnightBlue',
        'Olive',
        'OliveDrab',
        'Orange',
        'OrangeRed',
        'Orchid',
        'PaleVioletRed',
        'Purple',
        'RebeccaPurple',
        'Red',
        'RoyalBlue',
        'SaddleBrown',
        'Salmon',
        'SandyBrown',
        'SeaGreen',
        'Sienna',
        'SkyBlue',
        'SlateBlue',
        'SteelBlue',
        'Teal',
        'Tomato',
        'Violet',
        'YellowGreen'
      ]
    }
    mixins = [TestMixin]
    methods = {
      changeNewSkillValue(event) {
        this.newSkill = event.detail.value
      },
      addSkill(index, item) {
        this.skills.splice(index + 1, 0, {
          name: this.newSkill,
          floor: item.floor + 1,
          showEdit: 'none',
          showAdd: 'none'
        })
        this.skills[index].showAdd = 'none'
        this.newSkill = ''
      },
      enableAdd(index, item) {
        this.skills[index].showAdd = ''
      },
      enableEdit(index, item) {
        this.skills[index].showEdit = ''
      },
      editSkill(index, item) {
        if ( this.newSkill != '') {
          this.skills[index].name = this.newSkill
          this.newSkill = ''
        }
        this.skills[index].showEdit = 'none'
      },
      deleteSkill(index, item) {
        if (index === 0) {
          return
        }
        let num = 1
        let keepOn = true
        this.skills.forEach((v, i) => {
          if (i > index && v.floor > item.floor && keepOn) {
            num++
          }
          if (i > index && v.floor <= item.floor) {
            keepOn = false
          }
        })
        this.skills.splice(index, num)
      },
      generateSkillTreeImg() {
        this.showPanel = 'none'
        this.showCanvas = ''
        let getRandomNum = function(Min, Max) {
          let Range = Max - Min
          let Rand = Math.random()
          return (Min + Math.round(Rand * Range))
        }
        let Treedata = this.getTreeData()
        let ctx = wx.createCanvasContext('skillTree', this)
        ctx.setFontSize(this.fontSize)
        Treedata.forEach((item, index) => {
          ctx.fillText(
              item.name
            , item.x
            , item.y
            , this.nodeWith)
          ctx.setLineWidth(1)
          if (index > 0) {
            let fatherIndex = item.father
            if (item.floor === 2) {
              ctx.setStrokeStyle(this.colors[getRandomNum(0, this.colors.length - 1)])
            }
            ctx.beginPath()
            ctx.moveTo(Treedata[fatherIndex].x + this.nodeWidth, Treedata[fatherIndex].y)
            ctx.quadraticCurveTo(Treedata[fatherIndex].x + this.nodeWidth, Treedata[fatherIndex].y, item.x, item.y)
            ctx.stroke()
            ctx.beginPath()
            ctx.moveTo(item.x, item.y)
            ctx.quadraticCurveTo(item.x, item.y, item.x + this.nodeWidth, item.y)
            ctx.stroke()
          }
        })
        ctx.draw()
      }
    }
    getTreeData() {
      let _skills = this.skills
      // 根据层数确定字体大小
      _skills.forEach(v => {
        if (v.floor > this.maxFloor) {
          this.maxFloor = v.floor
        }
      })
      this.nodeWidth = this.deviceWidth / (2 * this.maxFloor)

      // 获取每个skill渲染的位置
      let startHeight = 0
      const l = _skills.length
      _skills.map((v, index) => {
        if (index === 0) {
          _skills[index]['y'] = this.fontSize * 2
          startHeight = this.fontSize * 2
        } else {
          if (_skills[index - 1].floor < _skills[index].floor) {
            _skills[index]['y'] = startHeight
          } else {
            _skills[index]['y'] = (startHeight += this.fontSize * 2)
          }
        }
        _skills[index]['x'] = (_skills[index].floor - 1) * 2 * this.nodeWidth
      })
      //修改canvas的高度
      this.treeheight = startHeight + 10

      // 找到每个skill的父亲
      let i = l - 1
      while (i >= 0) {
        let j = i - 1
        while (j >= 0 && _skills[j].floor >= _skills[i].floor) {
          j--
        }
        _skills[i]['father'] = j
        i--
      }
      return _skills
    }
  }
  /**
   * 根节点在左上角
   * 1/20 deviceWidth
   * 应该是从父节点右下角开始画 到 子节点的右下角
   * 从根节点出发的每个分支的颜色要统一
   *
   */
</script>
